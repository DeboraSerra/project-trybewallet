{"version":3,"sources":["actions/index.js","pages/Login.js","components/Header.js","components/CreateSelect.js","components/Loading.js","components/ExpensesTable.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["responseSuccess","currencies","type","payload","fetchCurrencies","dispatch","a","fetch","response","json","data","Object","keys","filter","item","message","Login","handleChange","target","name","value","setState","validateForm","state","email","password","isValidEmail","match","isValidPass","length","isValid","sendLogin","e","preventDefault","props","history","addUser","push","this","onSubmit","className","onChange","data-testid","placeholder","onClick","disabled","React","Component","connect","user","expenses","wallet","currency","total","map","parseFloat","rate","exchangeRates","ask","reduce","acc","toFixed","htmlFor","id","curr","key","Loading","ExpensesTable","editExpense","description","tag","method","split","removeExpense","Wallet","sendExpense","price","lastId","change","isLoading","App","exact","path","component","Boolean","window","location","hostname","INITIAL_USER","userReducer","action","INITIAL_WALLET","error","walletReducer","some","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"+cAuBMA,EAAkB,SAACC,GAAD,MAAiB,CACvCC,KAtB6B,mBAuB7BC,QAASF,IAGEG,EAAkB,yDAC7B,WAAOC,GAAP,mBAAAC,EAAA,6DACED,EAAS,CAAEH,KA7BW,eA4BxB,kBAG2BK,MAAM,+CAHjC,cAGUC,EAHV,gBAIuBA,EAASC,OAJhC,OAIUC,EAJV,OAKUT,EAAaU,OAAOC,KAAKF,GAC5BG,QAAO,SAACC,GAAD,MAAmB,SAATA,KACpBT,EAASL,EAAgBC,IACzBI,EAAS,CAAEH,KAhCW,eAiCpBC,QAASO,IATf,kDAWIL,EAtBqC,CACzCH,KAhB2B,gBAiB3BC,QAoB2B,KAAMY,UAXjC,0DAD6B,uDCtBzBC,G,wDACJ,aAAe,IAAD,8BACZ,gBAQFC,aAAe,YAAkC,IAAD,IAA9BC,OAAUC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAChC,EAAKC,SAAL,eAAiBF,EAAOC,IAAS,WAC/B,EAAKE,mBAXK,EAedA,aAAe,WACb,MAA4B,EAAKC,MAAzBC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SACTC,EAAeF,EAAMG,MAAM,kDAE3BC,EAAcH,EAASI,QADV,EAEnB,EAAKR,SAAS,CAAES,QAASJ,GAAgBE,KApB7B,EAuBdG,UAAY,SAACC,GACXA,EAAEC,iBACF,MAA8B,EAAKC,MAA3B7B,EAAR,EAAQA,SAAU8B,EAAlB,EAAkBA,QAElB9B,EDrBmB,SAACmB,GAAD,MAAY,CACjCtB,KAdsB,WAetBC,QAASqB,GCmBEY,CADS,EAAKb,MAAfC,QAERW,EAAQE,KAAK,0BA1Bb,EAAKd,MAAQ,CACXC,MAAO,GACPC,SAAU,GACVK,SAAS,GALC,E,0CA+Bd,WACE,MAAqCQ,KAAKf,MAAlCC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAAUK,EAAzB,EAAyBA,QACzB,OACE,0BAAMS,SAAWD,KAAKP,UAAYS,UAAU,cAC1C,2BACEA,UAAU,cACVtC,KAAK,QACLiB,KAAK,QACLC,MAAQI,EACRiB,SAAWH,KAAKrB,aAChByB,cAAY,cACZC,YAAY,WAEd,2BACEH,UAAU,cACVtC,KAAK,WACLiB,KAAK,WACLC,MAAQK,EACRgB,SAAWH,KAAKrB,aAChByB,cAAY,iBACZC,YAAY,aAEd,4BACEH,UAAU,YACVtC,KAAK,SACL0C,QAAUN,KAAKP,UACfc,UAAYf,GAJd,e,GAtDYgB,IAAMC,YA0EXC,gBAAUhC,GC7BVgC,G,MAAAA,aANS,SAACzB,GAAD,MAAY,CAClCC,MAAOD,EAAM0B,KAAKzB,MAClB0B,SAAU3B,EAAM4B,OAAOD,SACvBE,SAAU7B,EAAM4B,OAAOC,YAGVJ,EA9CA,SAAC,GAAmC,IAAjCxB,EAAgC,EAAhCA,MAAO0B,EAAyB,EAAzBA,SAAUE,EAAe,EAAfA,SAC3BC,EAAQH,EACXI,KAAI,SAACxC,GAAD,MAAW,CACdM,MAAOmC,WAAWzC,EAAKM,OACvBoC,KAAMD,WAAWzC,EAAK2C,cAAc3C,EAAKsC,UAAUM,SAEpDC,QAAO,SAACC,EAAD,UAA0BA,EAA1B,EAAQxC,MAAR,EAAeoC,OAAiC,GAC1D,OACE,gCACE,uBAAGd,cAAY,eAAelB,GAC9B,gCAEG,IACD,0BAAMkB,cAAY,eACdW,EAAMQ,QAAQ,IAEjB,IACD,0BAAMnB,cAAY,yBACfU,SCWIJ,eAVS,SAACzB,GAAD,MAAY,CAClCtB,WAAYsB,EAAM4B,OAAOlD,cASZ+C,EA9BM,SAAC,GAAD,IAAG/C,EAAH,EAAGA,WAAYgB,EAAf,EAAeA,aAAcG,EAA7B,EAA6BA,MAA7B,OACnB,2BAAO0C,QAAQ,YACb,0BAAMtB,UAAU,SAAhB,SACA,4BACEA,UAAU,gBACVuB,GAAG,WACH5C,KAAK,WACLsB,SAAWxB,EACXG,MAAQA,EACRsB,cAAY,kBAEXzC,EAAWqD,KAAI,SAACU,GAAD,OACd,4BAAQ5C,MAAQ4C,EAAOC,IAAMD,GAC1BA,WCJIE,G,kKATb,WACE,OACE,6BAAS1B,UAAU,aACjB,uBAAGA,UAAU,iB,GAJCM,IAAMC,YCGtBoB,G,kKACJ,WACE,MAA4C7B,KAAKJ,MAAzCgB,EAAR,EAAQA,SAAU7C,EAAlB,EAAkBA,SAAU+D,EAA5B,EAA4BA,YAC5B,OACE,6BAAS5B,UAAU,SACjB,+BACE,+BACE,4BACE,+CACA,mCACA,sDACA,qCACA,qCACA,mDACA,gDACA,qDACA,gDAGJ,+BACGU,EAASI,KAAI,SAACxC,GACb,IAAQuD,EAC0BvD,EAD1BuD,YAAaC,EACaxD,EADbwD,IAAKC,EACQzD,EADRyD,OAAQnD,EACAN,EADAM,MAChCgC,EAAgCtC,EAAhCsC,SAAUK,EAAsB3C,EAAtB2C,cAAeM,EAAOjD,EAAPiD,GAC3B,OACE,wBAAIE,IAAMF,GACR,4BAAKM,GACL,4BAAKC,GACL,4BAAKC,GACL,4BAAKhB,WAAWnC,GAAOyC,QAAQ,IAC/B,4BAAKJ,EAAcL,GAAUjC,KAAKqD,MAAM,KAAK,IAC7C,4BAAKjB,WAAWE,EAAcL,GAAUM,KAAKG,QAAQ,IACrD,6BAEKN,WAAWnC,GACRmC,WAAWE,EAAcL,GAAUM,MACpCG,QAAQ,IAGf,oCACA,4BACE,4BACErB,UAAU,iBACVtC,KAAK,SACLwC,cAAY,WACZE,QAAU,kBAAMwB,EAAYtD,KAJ9B,UAQA,4BACE0B,UAAU,mBACVtC,KAAK,SACLwC,cAAY,aACZE,QAAU,kBAAMvC,ELlDT,SAAC0D,GAAD,MAAS,CACpC7D,KAH4B,iBAI5B6D,MKgD6CU,CAAcV,MAJzC,uB,GAhDQjB,IAAMC,YAqFnBC,eAlBS,SAACzB,GAAD,MAAY,CAClC2B,SAAU3B,EAAM4B,OAAOD,YAiBVF,CAAyBmB,GCjFlCO,G,wDACJ,aAAe,IAAD,8BACZ,gBAoBFzD,aAAe,YAAkC,IAAD,IAA9BC,OAAUC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAChC,EAAKC,SAAL,eAAiBF,EAAOC,KAtBZ,EAyBduD,YAAc,SAAC3C,GACbA,EAAEC,iBACF,IAAQ5B,EAAa,EAAK6B,MAAlB7B,SACRA,EAASD,KACT,IAAQwE,EAAU,EAAK1C,MAAf0C,MACR,EACgC,EAAKrD,MAD7BH,EAAR,EAAQA,MAAOiD,EAAf,EAAeA,YAAajB,EAA5B,EAA4BA,SAAUmB,EAAtC,EAAsCA,OAAQD,EAA9C,EAA8CA,IAC5CP,EADF,EACEA,GAAIc,EADN,EACMA,OAAQpB,EADd,EACcA,cAUdpD,ENPoC,CACtCH,KA1CyB,cA2CzBC,QMJsB,CAClB4D,KACA3C,QACAiD,cACAjB,WACAmB,SACAD,MACAb,cAAeA,GAAiBmB,KAGlC,EAAKvD,SAAS,CACZD,MAAO,EACPiD,YAAa,GACbjB,SAAU,MACVmB,OAAQ,GACRD,IAAK,cACLP,GAAIA,EAAKc,EAASA,EAASd,EAAK,EAChCc,OAAQd,EACRe,QAAQ,EACRrB,cAAe,QAnDL,EAuDdW,YAAc,SAACtD,GACb,IAAQiD,EAAO,EAAKxC,MAAZwC,GACR,EAAK1C,SAAS,CACZD,MAAON,EAAKM,MACZiD,YAAavD,EAAKuD,YAClBjB,SAAUtC,EAAKsC,SACfmB,OAAQzD,EAAKyD,OACbD,IAAKxD,EAAKwD,IACVP,GAAIjD,EAAKiD,GACTc,OAAQd,EACRe,QAAQ,EACRrB,cAAe3C,EAAK2C,iBA/DtB,EAAKlC,MAAQ,CACXH,MAAO,EACPiD,YAAa,GACbjB,SAAU,MACVmB,OAAQ,GACRD,IAAK,cACLP,GAAI,EACJc,OAAQ,KACRC,QAAQ,EACRrB,cAAe,MAZL,E,qDAgBd,YAEEpD,EADqBiC,KAAKJ,MAAlB7B,UACCD,O,oBAoDX,WACE,IAAQ2E,EAAczC,KAAKJ,MAAnB6C,UACR,EAA8DzC,KAAKf,MAA3DH,EAAR,EAAQA,MAAOiD,EAAf,EAAeA,YAAajB,EAA5B,EAA4BA,SAAUmB,EAAtC,EAAsCA,OAAQD,EAA9C,EAA8CA,IAAKQ,EAAnD,EAAmDA,OACnD,OACE,iCACE,kBAAC,EAAD,MACA,0BAAMvC,SAAWD,KAAKqC,YAAcnC,UAAU,aAC5C,2BACEA,UAAU,eACVE,cAAY,cACZxC,KAAK,SACLiB,KAAK,QACLC,MAAQA,EACRqB,SAAWH,KAAKrB,aAChB0B,YAAY,UAEd,2BACEH,UAAU,eACVE,cAAY,oBACZxC,KAAK,OACLiB,KAAK,cACLC,MAAQiD,EACR5B,SAAWH,KAAKrB,aAChB0B,YAAY,gBAEd,kBAAC,EAAD,CACEvB,MAAQgC,EACRnC,aAAeqB,KAAKrB,eAEtB,4BACEuB,UAAU,gBACVpB,MAAQmD,EACR9B,SAAWH,KAAKrB,aAChBE,KAAK,SACLuB,cAAY,gBAEZ,4BAAQtB,MAAM,YAAd,YACA,4BAAQA,MAAM,2BAAd,2BACA,4BAAQA,MAAM,0BAAd,2BAEF,4BACEoB,UAAU,gBACVpB,MAAQkD,EACR7B,SAAWH,KAAKrB,aAChBE,KAAK,MACLuB,cAAY,aAEZ,4BAAQtB,MAAM,qBAAd,qBACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,YAAd,aAEF,4BACEoB,UAAU,aACVtC,KAAK,SACL0C,QAAUN,KAAKqC,aAEdG,EAAS,iBAAmB,sBAGhCC,GAAa,kBAAC,EAAD,MACd,kBAAC,EAAD,CAAeX,YAAc9B,KAAK8B,mB,GArIrBtB,IAAMC,YA2JZC,eAhBS,SAACzB,GAAD,MAAY,CAClCwD,UAAWxD,EAAM4B,OAAO4B,UACxBH,MAAOrD,EAAM4B,OAAOM,cACpBP,SAAU3B,EAAM4B,OAAOD,YAaVF,CAAyB0B,G,MCpJzBM,MAXf,WACE,OACE,iCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,gBAAgBC,UAAYnE,IAC9C,kBAAC,IAAD,CAAOkE,KAAK,wBAAwBC,UAAYT,OCCpCU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS5D,MACvB,2D,kCChBA6D,EAAe,CACnBhE,MAAO,IAeMiE,EAZK,WAAmC,IAAlClE,EAAiC,uDAAzBiE,EAAcE,EAAW,uCACpD,OAAQA,EAAOxF,MACf,ITRsB,WSSpB,OAAO,2BACFqB,GADL,IAEEC,MAAOkE,EAAOvF,UAElB,QACE,OAAOoB,I,QCVLoE,EAAiB,CACrBvC,SAAU,MACVnD,WAAY,GACZiD,SAAU,GACV0C,MAAO,GACPb,WAAW,EACXtB,cAAe,IAqDFoC,EAlDO,WAAqC,IAApCtE,EAAmC,uDAA3BoE,EAAgBD,EAAW,uCACxD,OAAQA,EAAOxF,MACf,IVdwB,aUetB,OAAO,2BACFqB,GADL,IAEEwD,WAAW,IAEf,IVlB6B,mBUmB3B,OAAO,2BACFxD,GADL,IAEEtB,WAAYyF,EAAOvF,QACnB4E,WAAW,EACXa,MAAO,KAEX,IVxB2B,gBUyBzB,OAAO,2BACFrE,GADL,IAEEtB,WAAY,GACZ8E,WAAW,EACXa,MAAOF,EAAOvF,UAElB,IV9ByB,cU+BvB,OAAO,2BACFoB,GADL,IAEE2B,SAAU3B,EAAM2B,SACb4C,MAAK,qBAAG/B,KAAgB2B,EAAOvF,QAAQ4D,MACtCxC,EAAM2B,SAASI,KAAI,SAACxC,GAClB,OAAIA,EAAKiD,KAAO2B,EAAOvF,QAAQ4D,GACtB,2BAAKjD,GAAS4E,EAAOvF,SAEvBW,KANH,sBAQAS,EAAM2B,UARN,CAQgBwC,EAAOvF,YAErC,IVzC4B,iBU0C1B,OAAO,2BACFoB,GADL,IAEE2B,SAAU3B,EAAM2B,SAASrC,QAAO,qBAAGkD,KAAgB2B,EAAO3B,QAE9D,IV/C0B,eUgDxB,OAAO,2BACFxC,GADL,IAEEkC,cAAeiC,EAAOvF,QACtB4E,WAAW,IAEf,QACE,OAAOxD,IClDIwE,EALKC,0BAAgB,CAClC/C,KAAMwC,EACNtC,OAAQ0C,ICIKI,EALDC,sBACZH,EACAI,8BAAoBC,0BAAgBC,OCEtCC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUN,MAAQA,GAChB,kBAAC,EAAD,QAGJO,SAASC,eAAe,SLoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApB,GACLqB,QAAQrB,MAAMA,EAAM7E,c","file":"static/js/main.1a20c331.chunk.js","sourcesContent":["export const ADD_USER = 'ADD_USER';\nexport const IS_LOADING = 'IS_LOADING';\nexport const RESPONSE_SUCCES = 'RESPONSE_SUCCESS';\nexport const RESPONSE_FAIL = 'RESPONSE_FAIL';\nexport const ADD_EXPENSE = 'ADD_EXPENSE';\nexport const GET_EXCHANGE = 'GET_EXCHANGE';\nexport const REMOVE_EXPENSE = 'REMOVE_EXPENSE';\n\nexport const removeExpense = (id) => ({\n  type: REMOVE_EXPENSE,\n  id,\n});\n\nexport const addUser = (email) => ({\n  type: ADD_USER,\n  payload: email,\n});\n\nexport const errorFetching = (message) => ({\n  type: RESPONSE_FAIL,\n  payload: message,\n});\n\nconst responseSuccess = (currencies) => ({\n  type: RESPONSE_SUCCES,\n  payload: currencies,\n});\n\nexport const fetchCurrencies = () => (\n  async (dispatch) => {\n    dispatch({ type: IS_LOADING });\n    try {\n      const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n      const data = await response.json();\n      const currencies = Object.keys(data)\n        .filter((item) => item !== 'USDT');\n      dispatch(responseSuccess(currencies));\n      dispatch({ type: GET_EXCHANGE,\n        payload: data });\n    } catch (error) {\n      dispatch(errorFetching(error.message));\n    }\n  }\n);\n\nexport const addExpense = (expense) => ({\n  type: ADD_EXPENSE,\n  payload: expense,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addUser } from '../actions';\nimport '../styles/Login.css';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      email: '',\n      password: '',\n      isValid: false,\n    };\n  }\n\n  handleChange = ({ target: { name, value } }) => {\n    this.setState({ [name]: value }, () => {\n      this.validateForm();\n    });\n  }\n\n  validateForm = () => {\n    const { email, password } = this.state;\n    const isValidEmail = email.match(/[\\w.!#$%&'*+=?^_`{|}~-]+@[\\w.-]+\\.[A-Z]{2,}/gmi);\n    const passLength = 6;\n    const isValidPass = password.length >= passLength;\n    this.setState({ isValid: isValidEmail && isValidPass });\n  }\n\n  sendLogin = (e) => {\n    e.preventDefault();\n    const { dispatch, history } = this.props;\n    const { email } = this.state;\n    dispatch(addUser(email));\n    history.push('/trybewallet/carteira');\n  }\n\n  render() {\n    const { email, password, isValid } = this.state;\n    return (\n      <form onSubmit={ this.sendLogin } className=\"login-form\" >\n        <input\n          className=\"login-input\"\n          type=\"email\"\n          name=\"email\"\n          value={ email }\n          onChange={ this.handleChange }\n          data-testid=\"email-input\"\n          placeholder=\"E-mail\"\n        />\n        <input\n          className=\"login-input\"\n          type=\"password\"\n          name=\"password\"\n          value={ password }\n          onChange={ this.handleChange }\n          data-testid=\"password-input\"\n          placeholder=\"Password\"\n        />\n        <button\n          className=\"login-btn\"\n          type=\"submit\"\n          onClick={ this.sendLogin }\n          disabled={ !isValid }\n        >\n          Entrar\n        </button>\n      </form>\n    );\n  }\n}\n\nLogin.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n\nexport default connect()(Login);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport '../styles/Header.css';\n\nconst Header = ({ email, expenses, currency }) => {\n  const total = expenses\n    .map((item) => ({\n      value: parseFloat(item.value),\n      rate: parseFloat(item.exchangeRates[item.currency].ask),\n    }))\n    .reduce((acc, { value, rate }) => acc + (value * rate), 0);\n  return (\n    <header>\n      <p data-testid=\"email-field\">{email}</p>\n      <p>\n        R$\n        {' '}\n        <span data-testid=\"total-field\">\n          { total.toFixed(2) }\n        </span>\n        {' '}\n        <span data-testid=\"header-currency-field\">\n          {currency}\n        </span>\n      </p>\n    </header>\n  );\n};\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  expenses: PropTypes.arrayOf(\n    PropTypes.shape({\n      value: PropTypes.string,\n      exchangeRates: PropTypes.objectOf(\n        PropTypes.shape({\n          ask: PropTypes.string,\n        }),\n      ),\n    }),\n  ).isRequired,\n  currency: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  expenses: state.wallet.expenses,\n  currency: state.wallet.currency,\n});\n\nexport default connect(mapStateToProps)(Header);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst CreateSelect = ({ currencies, handleChange, value }) => (\n  <label htmlFor=\"currency\">\n    <span className=\"label\">Moeda</span>\n    <select\n      className=\"wallet-select\"\n      id=\"currency\"\n      name=\"currency\"\n      onChange={ handleChange }\n      value={ value }\n      data-testid=\"currency-input\"\n    >\n      {currencies.map((curr) => (\n        <option value={ curr } key={ curr }>\n          {curr}\n        </option>\n      ))}\n    </select>\n  </label>\n);\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n});\n\nCreateSelect.propTypes = {\n  currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n  value: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps)(CreateSelect);\n","import React from 'react';\nimport '../styles/Loading.css';\n\nclass Loading extends React.Component {\n  render() {\n    return (\n      <section className=\"load-sect\">\n        <p className=\"loading\" />\n      </section>\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { removeExpense } from '../actions';\nimport '../styles/ExpensesTable.css';\n\nclass ExpensesTable extends React.Component {\n  render() {\n    const { expenses, dispatch, editExpense } = this.props;\n    return (\n      <section className=\"table\">\n        <table>\n          <thead>\n            <tr>\n              <th>Descrição</th>\n              <th>Tag</th>\n              <th>Método de pagamento</th>\n              <th>Valor</th>\n              <th>Moeda</th>\n              <th>Câmbio utilizado</th>\n              <th>Valor convertido</th>\n              <th>Moeda de conversão</th>\n              <th>Editar/Excluir</th>\n            </tr>\n          </thead>\n          <tbody>\n            {expenses.map((item) => {\n              const { description, tag, method, value,\n                currency, exchangeRates, id } = item;\n              return (\n                <tr key={ id }>\n                  <td>{description}</td>\n                  <td>{tag}</td>\n                  <td>{method}</td>\n                  <td>{parseFloat(value).toFixed(2)}</td>\n                  <td>{exchangeRates[currency].name.split('/')[0]}</td>\n                  <td>{parseFloat(exchangeRates[currency].ask).toFixed(2)}</td>\n                  <td>\n                    {\n                      (parseFloat(value)\n                        * parseFloat(exchangeRates[currency].ask))\n                        .toFixed(2)\n                    }\n                  </td>\n                  <td>Real</td>\n                  <td>\n                    <button\n                      className=\"table-btn edit\"\n                      type=\"button\"\n                      data-testid=\"edit-btn\"\n                      onClick={ () => editExpense(item) }\n                    >\n                      Editar\n                    </button>\n                    <button\n                      className=\"table-btn delete\"\n                      type=\"button\"\n                      data-testid=\"delete-btn\"\n                      onClick={ () => dispatch(removeExpense(id)) }\n                    >\n                      Excluir\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nExpensesTable.propTypes = {\n  editExpense: PropTypes.func.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  expenses: PropTypes.arrayOf(\n    PropTypes.shape({\n      description: PropTypes.string,\n      tag: PropTypes.string,\n      method: PropTypes.string,\n      value: PropTypes.string,\n      currency: PropTypes.string,\n    }),\n  ).isRequired,\n};\n\nexport default connect(mapStateToProps)(ExpensesTable);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport { fetchCurrencies, addExpense } from '../actions';\nimport CreateSelect from '../components/CreateSelect';\nimport Loading from '../components/Loading';\nimport ExpensesTable from '../components/ExpensesTable';\nimport '../styles/Wallet.css';\n\nclass Wallet extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      value: 0,\n      description: '',\n      currency: 'USD',\n      method: '',\n      tag: 'alimentacao',\n      id: 0,\n      lastId: null,\n      change: false,\n      exchangeRates: null,\n    };\n  }\n\n  componentDidMount() {\n    const { dispatch } = this.props;\n    dispatch(fetchCurrencies());\n  }\n\n  handleChange = ({ target: { name, value } }) => {\n    this.setState({ [name]: value });\n  }\n\n  sendExpense = (e) => {\n    e.preventDefault();\n    const { dispatch } = this.props;\n    dispatch(fetchCurrencies());\n    const { price } = this.props;\n    const { value, description, currency, method, tag,\n      id, lastId, exchangeRates } = this.state;\n    const currExpense = {\n      id,\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      exchangeRates: exchangeRates || price,\n    };\n    dispatch(addExpense(currExpense));\n    this.setState({\n      value: 0,\n      description: '',\n      currency: 'USD',\n      method: '',\n      tag: 'alimentacao',\n      id: id < lastId ? lastId : id + 1,\n      lastId: id,\n      change: false,\n      exchangeRates: null,\n    });\n  }\n\n  editExpense = (item) => {\n    const { id } = this.state;\n    this.setState({\n      value: item.value,\n      description: item.description,\n      currency: item.currency,\n      method: item.method,\n      tag: item.tag,\n      id: item.id,\n      lastId: id,\n      change: true,\n      exchangeRates: item.exchangeRates,\n    });\n  }\n\n  render() {\n    const { isLoading } = this.props;\n    const { value, description, currency, method, tag, change } = this.state;\n    return (\n      <section>\n        <Header />\n        <form onSubmit={ this.sendExpense } className=\"data-form\">\n          <input\n            className=\"wallet-input\"\n            data-testid=\"value-input\"\n            type=\"number\"\n            name=\"value\"\n            value={ value }\n            onChange={ this.handleChange }\n            placeholder=\"Value\"\n          />\n          <input\n            className=\"wallet-input\"\n            data-testid=\"description-input\"\n            type=\"text\"\n            name=\"description\"\n            value={ description }\n            onChange={ this.handleChange }\n            placeholder=\"Description\"\n          />\n          <CreateSelect\n            value={ currency }\n            handleChange={ this.handleChange }\n          />\n          <select\n            className=\"wallet-select\"\n            value={ method }\n            onChange={ this.handleChange }\n            name=\"method\"\n            data-testid=\"method-input\"\n          >\n            <option value=\"Dinheiro\">Dinheiro</option>\n            <option value=\"Cartão de crédito\">Cartão de crédito</option>\n            <option value=\"Cartão de débito\">Cartão de débito</option>\n          </select>\n          <select\n            className=\"wallet-select\"\n            value={ tag }\n            onChange={ this.handleChange }\n            name=\"tag\"\n            data-testid=\"tag-input\"\n          >\n            <option value=\"Alimentação\">Alimentação</option>\n            <option value=\"Lazer\">Lazer</option>\n            <option value=\"Trabalho\">Trabalho</option>\n            <option value=\"Transporte\">Transporte</option>\n            <option value=\"Saúde\">Saúde</option>\n          </select>\n          <button\n            className=\"wallet-btn\"\n            type=\"submit\"\n            onClick={ this.sendExpense }\n          >\n            {change ? 'Editar despesa' : 'Adicionar despesa'}\n          </button>\n        </form>\n        {isLoading && <Loading />}\n        <ExpensesTable editExpense={ this.editExpense } />\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  isLoading: state.wallet.isLoading,\n  price: state.wallet.exchangeRates,\n  expenses: state.wallet.expenses,\n});\n\nWallet.propTypes = {\n  price: PropTypes.objectOf(\n    PropTypes.shape({\n      ask: PropTypes.string,\n    }),\n  ).isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  dispatch: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps)(Wallet);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\nimport './App.css';\n\nfunction App() {\n  return (\n    <section >\n      <Switch>\n        <Route exact path=\"/trybewallet/\" component={ Login } />\n        <Route path=\"/trybewallet/carteira\" component={ Wallet } />\n      </Switch>\n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ADD_USER } from '../actions';\n\nconst INITIAL_USER = {\n  email: '',\n};\n\nconst userReducer = (state = INITIAL_USER, action) => {\n  switch (action.type) {\n  case ADD_USER:\n    return {\n      ...state,\n      email: action.payload,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default userReducer;\n","import { IS_LOADING, RESPONSE_FAIL, RESPONSE_SUCCES,\n  ADD_EXPENSE, GET_EXCHANGE, REMOVE_EXPENSE } from '../actions';\n\n// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nconst INITIAL_WALLET = {\n  currency: 'BRL',\n  currencies: [],\n  expenses: [],\n  error: '',\n  isLoading: false,\n  exchangeRates: {},\n};\n\nconst walletReducer = (state = INITIAL_WALLET, action) => {\n  switch (action.type) {\n  case IS_LOADING:\n    return {\n      ...state,\n      isLoading: true,\n    };\n  case RESPONSE_SUCCES:\n    return {\n      ...state,\n      currencies: action.payload,\n      isLoading: false,\n      error: '',\n    };\n  case RESPONSE_FAIL:\n    return {\n      ...state,\n      currencies: [],\n      isLoading: false,\n      error: action.payload,\n    };\n  case ADD_EXPENSE:\n    return {\n      ...state,\n      expenses: state.expenses\n        .some(({ id }) => id === action.payload.id) ? (\n          state.expenses.map((item) => {\n            if (item.id === action.payload.id) {\n              return { ...item, ...action.payload };\n            }\n            return item;\n          })\n        ) : [...state.expenses, action.payload],\n    };\n  case REMOVE_EXPENSE:\n    return {\n      ...state,\n      expenses: state.expenses.filter(({ id }) => id !== action.id),\n    };\n  case GET_EXCHANGE:\n    return {\n      ...state,\n      exchangeRates: action.payload,\n      isLoading: false,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default walletReducer;\n","import { combineReducers } from 'redux';\nimport userReducer from './user';\nimport walletReducer from './wallet';\n\nconst rootReducer = combineReducers({\n  user: userReducer,\n  wallet: walletReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}